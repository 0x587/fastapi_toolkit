import datetime
from datetime import timedelta

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

from ..db import get_db
from .models import SchemaUser, SchemaUserCreate, Token
from .utils import authenticate_user, create_access_token, get_current_user, get_user, add_user, \
    ACCESS_TOKEN_EXPIRE_MINUTES

auth_router = APIRouter()


@auth_router.post('/get_user/{username}')
async def get_user(user=Depends(get_user)) -> SchemaUser:
    if user:
        return user
    else:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='User not found')


@auth_router.put('/register')
async def register(user: SchemaUserCreate, db=Depends(get_db)):
    return await add_user(user, db)


@auth_router.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(),
                                 db=Depends(get_db)) -> Token:
    user = await authenticate_user(form_data.username, form_data.password, db)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Incorrect username or password",
        )
    user.last_login_at = datetime.datetime.utcnow()
    await db.commit()
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return Token(access_token=access_token, token_type="bearer")


@auth_router.get("/me")
async def read_users_me(current_user=Depends(get_current_user)) -> SchemaUser:
    return current_user
