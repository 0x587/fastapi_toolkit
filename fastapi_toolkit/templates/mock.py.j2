import asyncio

from .models import *
from .db import sessionmanager
from polyfactory.factories.sqlalchemy_factory import SQLAlchemyFactory


{% for model in models %}
{% set dep = deps[model.name.camel] %}
{% set links = model.links if dep else [] %}
class {{ model.name.camel }}Factory(SQLAlchemyFactory[{{ model.name.db }}]):
    __sync_persistence__ = True
    {% if dep %}
    __set_relationships__ = True
    {% endif %}

    {% for link in links %}
    {% set is_batch = link.t1 == 'many' %}
    {% set name = link.m2.name.snake_plural if is_batch else link.m2.name.snake %}
    {% if link.m2.name.camel in dep %}
    @classmethod
    def {{ name }}(cls):
        {% if is_batch %}
        return [{{ link.m2.name.camel }}Factory.build() for _ in range(10)]
        {% else %}
        return {{ link.m2.name.camel }}Factory.build()
        {% endif %}
    {% else %}
    {% set res = '[]' if is_batch else 'None' %}
    @classmethod
    def {{ name }}(cls):
        return {{ res }}
    {% endif %}

    {% endfor %}

{% endfor %}
def main():
    async def f():
        async with sessionmanager.session() as session:
            {% for model in models %}
            {{ model.name.camel }}Factory.__async_session__ = session
            {% endfor %}

            {% for root in mock_root %}
            await {{ root }}Factory.create_batch_async(size=10)
            {% endfor %}

    asyncio.run(f())

