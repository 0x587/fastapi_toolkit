{% set name = model.name.db %}
{% set s_name = model.name.snake %}
{% set base_schema = model.name.base_schema %}
{#{% set router = s_name + "_router" %}#}
{#{% set just_one_pk = metadata.model.pk|length == 1 %}#}
{#{% set pk_type = (metadata.model.pk.values()|list)[0].python_type_str %}#}

from typing import List, Optional
from fastapi import Depends, Response, HTTPException, status
from fastapi_pagination import Page
from fastapi_pagination.ext.sqlalchemy import paginate
from pydantic import UUID4
import uuid
import datetime
from sqlalchemy import select, Select
from ..db import get_db
from ..models import *
from ..schemas import *

NOT_FOUND = HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Item Not found")


# ------------------------Query Routes------------------------
async def get_one(ident: UUID4, db=Depends(get_db)) -> {{ base_schema }}:
    res = await db.get({{ name }}, ident)
    if res:
        return res
    raise NOT_FOUND


async def __get_all_query(
        {% for field in model.fields %}
        filter_{{field.name.snake}}: Optional[{{field.type}}] = None,
        {% endfor %}
        sort_by: Optional[str] = None, is_desc: bool = False,
) -> Select:
    query = select({{ name }})
    {% for field in model.fields %}
    if filter_{{field.name.snake}} is not None:
        query = query.filter({{ name }}.{{field.name.snake}} == filter_{{field.name.snake}})
    {% endfor %}
    if sort_by is not None:
        if is_desc:
            query = query.order_by(getattr({{ name }}, sort_by).desc())
        else:
            query = query.order_by(getattr({{ name }}, sort_by))
    return query


async def get_all(
        query=Depends(__get_all_query),
        db=Depends(get_db)
) -> Page[{{ base_schema }}]:
    return await paginate(db, query)


async def get_link_all(
        query=Depends(__get_all_query),
        db=Depends(get_db)
) -> Page[{{ model.name.schema }}]:
    return await paginate(db, query)
# ---------------------User Query Routes----------------------


# -----------------------Create Routes------------------------
async def create_one(
        {% for field in model.fields %}
        {{field.name.snake}}: {{field.type}},
        {% endfor %}
        {% for link in model.links %}
        {% if link.t1 == 'one' %}
        {% if link.nullable %}
        {{ link.m2.name.snake }}_ident: Optional[UUID4] = None,
        {% else %}
        {{ link.m2.name.snake }}_ident: UUID4,
        {% endif %}
        {% endif %}
        {% endfor %}
        response: Response, db=Depends(get_db)
) -> {{ base_schema }}:
    {{ s_name }} = {{ base_schema }}(
        {% for field in model.fields %}
        {{field.name.snake}}={{field.name.snake}},
        {% endfor %}
    )
    {{ s_name }} = {{ name }}(**{{ s_name }}.model_dump())
    {% for link in model.links %}
    {% if link.t1 == 'one' %}
    if {{ link.m2.name.snake }}_ident is not None:
        {{ link.m2.name.snake }} = await db.get({{ name }}, {{ link.m2.name.snake }}_ident)
        if not {{ link.m2.name.snake }}:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="{{ link.m2.name.camel }} Not found id:" + str({{ link.m2.name.snake }}_ident))
        {{ s_name }}.{{ link.m2.name.fk }} = {{ link.m2.name.snake }}_ident
    {% endif %}
    {% endfor %}
    db.add({{ s_name }})
    await db.commit()
    await db.refresh({{ s_name }})
    response.status_code = status.HTTP_201_CREATED
    return {{ base_schema }}.model_validate({{ s_name }})


# -----------------------Update Routes------------------------
async def update_one(
        ident: UUID4,
        {% for field in model.fields %}
        {{field.name.snake}}: Optional[{{field.type}}] = None,
        {% endfor %}
        db=Depends(get_db)) -> {{ base_schema }}:
    res = await db.get({{ name }}, ident)
    if not res:
        raise NOT_FOUND
    {% for field in model.fields %}
    if {{field.name.snake}} is not None:
        res.{{field.name.snake}} = {{field.name.snake}}
    {% endfor %}
    await db.commit()
    await db.refresh(res)
    return {{ base_schema }}.model_validate(res)


# -----------------------Delete Routes------------------------
async def delete_one(ident: UUID4, db=Depends(get_db)):
    res = await db.get({{ name }}, ident)
    if not res:
        raise NOT_FOUND
    {% if model.links %}
    {% for link in model.links %}
    {% if link.t1 == 'one' %}
    res.{{ link.m2.name.snake }} = None
    {% else %}
    for i in await res.awaitable_attrs.{{ link.m2.name.snake_plural }}:
        await db.delete(i)
    {% endif %}
    {% endfor %}
    await db.commit()
    {% endif %}
    await db.delete(res)
    await db.commit()
    return {'message': 'Deleted', 'id': ident}


# ----------------------Relation Routes-----------------------

