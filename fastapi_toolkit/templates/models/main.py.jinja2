{% import 'utils.j2' as utils %}
import uuid
import datetime
import enum
from typing import List

from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
from sqlalchemy import ForeignKey
from sqlalchemy.sql import sqltypes

from .db import Base


{% for model in models %}
class {{ model.name.db }}(Base):
    __tablename__ = "{{ model.name.table }}"

    id: Mapped[uuid.UUID] = mapped_column(sqltypes.UUID, primary_key=True)

    {% for field in model.fields %}
    {{ utils.render_table_field(field) }}
    {% endfor %}

    {%- for link in model.links %}
    {% set t = link.t1 %}
    {% set rt = link.t2 %}
    {% set l = link.m1 %}
    {% set r = link.m2 %}
    {% set r_name = r.name.snake_plural if t == 'many' else r.name.snake %}
    {% set l_name = l.name.snake_plural if rt == 'many' else l.name.snake %}
    {% set r_type = 'List["'+r.name.db+'"]' if t == 'many' else r.name.db %}
    {{ r_name }}: Mapped[{{ r_type }}] = relationship(back_populates="{{ l_name }}")
    {% if t != 'many' %}
    {{ r.name.fk }}: Mapped[uuid.UUID] = mapped_column(ForeignKey("{{ r.name.table }}.id"), nullable={{ link.nullable }})
    {% endif %}

    {% endfor %}

{% endfor %}
