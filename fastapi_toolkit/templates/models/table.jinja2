{% if metadata.is_user %}
class User(SQLAlchemyBaseUserTableUUID, Base):
{% else %}
class {{ name }}(Base):
{% endif %}
    __tablename__ = "{{ metadata.table_name }}"
    """pk"""
    {% if not metadata.is_user %}
    {% for field_name, field in metadata.pk.items() %}
    {{ field_name }}: Mapped[{{ field.python_type_str }}] = mapped_column({{ field.sql_type_str }}, primary_key=True)
    {% endfor %}
    {% endif %}
    """"""

    """fields"""
    {% for field_name, field in metadata.fields.items() %}
    {{ field_name }}: Mapped[{{ field.python_type_str }}] = mapped_column({{ field.sql_type_str }}, nullable=True)
    {% endfor %}
    """"""

    """fk"""
    {% for fk_name, fk in metadata.fk.items() %}
    {{ fk_name }}: Mapped[{{ fk.field.python_type_str }}] = mapped_column(ForeignKey("{{fk.other_model.table_name}}.{{ fk.other_model.require_one_pk()[0] }}"), nullable=True)
    {% endfor %}
    """"""

    """relationship"""
    {% for relation in metadata.relationship %}
    {% if relation.side == 'one' %}
    relation_one_{{ relation.target.snake_name }}: Mapped["{{ relation.target.name }}"] = relationship("{{ relation.target.name }}", back_populates="relation_many_{{metadata.snake_name}}")
    {% endif %}
    {% if relation.side == 'many' %}
    relation_many_{{ relation.target.snake_name }}: Mapped[List["{{ relation.target.name }}"]] = relationship("{{ relation.target.name }}", back_populates="relation_one_{{metadata.snake_name}}")
    {% endif %}
    {% if relation.side == 'both' %}
    relation_many_{{ relation.target.snake_name }}: Mapped[List["{{ relation.target.name }}"]] = relationship(
        secondary="{{ relation.link_table.table_name }}", back_populates="relation_many_{{metadata.snake_name}}")
    {{ relation.target.snake_name }}_associations: Mapped[List["{{ relation.link_table.name }}"]] = relationship(
        back_populates="{{metadata.snake_name}}")
    {% endif %}
    {% endfor %}
    """"""